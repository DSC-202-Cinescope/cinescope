import psycopg2
from config import config
import pandas as pd
from flask import Flask, render_template, request

app = Flask(__name__)



def getGenres(schema, table, column):
    """Return the column names of the given table."""
    conn = None
    genre_names = []
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()

        sql_command = f"SELECT {column} FROM {schema}.{table};"

        cur.execute(sql_command)
        genre_names = [row[0] for row in cur.fetchall()]

        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(f"Database error: {error}")
    finally:
        if conn is not None:
            conn.close()
    
    return genre_names

def getGenreId(schema, table, genre_name):
    """genre ID corresponding to the selected genre name."""
    conn = None
    genre_id = None
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()

        sql_command = f"SELECT id FROM {schema}.{table} WHERE name = %s;"
        cur.execute(sql_command, (genre_name,))
        result = cur.fetchone() 

        if result:
            genre_id = result[0]

        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(f"Database error: {error}")
    finally:
        if conn is not None:
            conn.close()
    
    return genre_id

def getMoviesByGenre(genre_id):
    conn = None
    movies = []
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()

        with open("../sql/genre-lookup.sql", "r") as file:
            sql_query = file.read()

        # Replace placeholder with actual genre ID
        sql_query = sql_query.replace("{GENRE_ID}", str(genre_id))

        cur.execute(sql_query)
        movies = cur.fetchall()

        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(f"Database error: {error}")
    finally:
        if conn is not None:
            conn.close()
    
    return movies

@app.route('/', methods=["GET", "POST"])
def index():
    genres = getGenres("public", "genre", "name")  # Fetch genre names only
    selected_genre = None
    genre_id = None
    movies = []

    if request.method == "POST":
        selected_genre = request.form.get("genre")  # Get selected genre name
        genre_id = getGenreId("public", "genre", selected_genre)

        if genre_id:
            movies = getMoviesByGenre(genre_id)

    return render_template("index.html", genres=genres, selected_genre=selected_genre, genre_id=genre_id, movies=movies)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080, debug=True)
    